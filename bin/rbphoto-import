#!/usr/bin/ruby
#
# photo import script for RbPhoto
# Copyright (C) 2008 Taku YASUI <tach@debian.or.jp>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# $Id$

require 'rbphoto/import'
require 'gtk2'

class RbPhoto
  class Import
    class Cui
      def initialize(opt)
        super(opt)
        self.copy
      end
    end

    class Gui < RbPhoto::Import
      def initialize(opt)
        super(opt)
        window = self.main_window
        window.show_all
        Gtk.main
      end

      def execute(w)
        if (@executing)
          @button_exec.label = _("Import")
          push_status(_("Stop"))
          show_log(_("Stopped by user"))
          @executing = false
          return
        end
        @executing = true
        push_status(_("Importing: please wait ..."))
        show_log(_("Start importing"))
        @button_exec.label = _("Stop")
      end

      def show_log(msg)
        @log_text.buffer.insert(@log_text.buffer.end_iter, Time.now.strftime("%Y/%m/%d %H:%M:%S ") + msg + "\n")
      end

      def push_status(msg)
        @status_bar.push(@status_bar_context_id, msg)
      end

      def set_args(name, status)
        @opt.__send__("#{name}=", status)
        p @opt.__send__(name)
      end

      def main_window
        window = Gtk::Window.new
        window.title = "#{RbPhoto::NAME} #{RbPhoto::VERSION}"
        window.set_default_size(400, -1)

        # quit when closing window
        window.signal_connect('delete_event') do
          Gtk.main_quit
          false
        end

        whole_box = Gtk::VBox.new(false, 0)

        main_box = Gtk::VBox.new(false, 10)
        button_box = Gtk::HBox.new(false, 10)

        verbose_checkbox = Gtk::CheckButton.new(_("Show _verbose log"))
        verbose_checkbox.active = true if ( @opt.verbose )
        verbose_checkbox.signal_connect( "toggled" ) { |w| set_args('verbose', w.active? ? true : false) }
        button_box.pack_start(verbose_checkbox, false, true, 0)

        no_act_checkbox = Gtk::CheckButton.new(_("Trial run with _no changes made"))
        no_act_checkbox.active = true if ( @opt.no_act )
        no_act_checkbox.signal_connect( "toggled" ) { |w| set_args('no_act', w.active? ? true : false) }
        button_box.pack_start(no_act_checkbox, false, true, 0)

        @button_exec = Gtk::Button.new(_("Execute"))
        @button_exec.signal_connect( "clicked" ) { |w| execute(w) }
        button_box.pack_end(@button_exec, false, true, 0)

        main_box.pack_end(button_box, false, true, 0)

        # show status bar
        @status_bar = Gtk::Statusbar.new
        @status_bar_context_id = @status_bar.get_context_id("main")

        # show log box
        log_box = Gtk::ScrolledWindow.new(hadjustment = nil, vadjustment = nil)
        log_box.set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_ALWAYS)
        @log_text = Gtk::TextView.new
        @log_text.editable = false
        log_box.add(@log_text)

        window.add(whole_box)
        whole_box.pack_start(main_box, false, true, 5)
        whole_box.pack_start(log_box, true, true, 0)
        whole_box.pack_end(@status_bar, false, true, 0)

        return window
      end
    end
  end
end

def main
  opt = RbPhoto::Import::Options.new
  if ( opt.no_gui )
    RbPhoto::Import::Cui.new(opt)
  else
    RbPhoto::Import::Gui.new(opt)
  end
end

main if ( __FILE__ == $0 )

# vim: set ts=2 sw=2 expandtab:
