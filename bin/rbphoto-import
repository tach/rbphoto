#!/usr/bin/ruby
#
# photo import script for RbPhoto
# Copyright (C) 2008 Taku YASUI <tach@debian.or.jp>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# $Id$

require 'rbphoto/import'
require 'gtk2'

class RbPhoto
  class Import
    class Cui < RbPhoto::Import
      def initialize(opt)
        super(opt)

        if ( ARGV.size < 2 )
          print self.help
          exit
        end

        @dstdir = ARGV.pop
        prepare_target(ARGV)

        execute
      end
    end

    class Gui < RbPhoto::Import
      def initialize(opt)
        super(opt)

        @dstdir = ARGV.pop if ( ARGV.size == 2 )
        @src = ARGV.pop if ( ARGV.size == 1 )
        window = main_window
        window.show_all
        Gtk.main
      end

      def execute(w)
        prepare_target([@src])
        if (@executing)
          @button_exec.label = _("Import")
          push_status(_("Stop"))
          show_log(_("Stopped by user"))
          @executing = false
          return
        end

        # execution
        @executing = true
        push_status(_("Importing: please wait ..."))
        show_log(_("Start importing"))
        @button_exec.label = _("Stop")
        FileUtils.instance_variable_set('@fileutils_output', @log_text)
        count = super()
        FileUtils.instance_variable_set('@fileutils_output', nil)

        # finish execution
        show_log(_("Importing finished"))
        show_log(_("%s file(s) have been imported") % count)
        @button_exec.label = _("Import")
        push_status(_("Importing finished: %s file(s) have been imported") % count)
        @executing = false
      end

      def show_log(msg)
        @log_text.buffer.insert(@log_text.buffer.end_iter, Time.now.strftime("%Y/%m/%d %H:%M:%S ") + msg + "\n")
      end

      def push_status(msg)
        @status_bar.push(@status_bar_context_id, msg)
      end

      def main_window
        window = Gtk::Window.new
        window.title = "#{RbPhoto::NAME} #{RbPhoto::VERSION}"
        window.set_default_size(400, -1)

        # quit when closing window
        window.signal_connect('delete_event') do
          Gtk.main_quit
          false
        end

        whole_box = Gtk::VBox.new(false, 0)
        main_box_h = Gtk::HBox.new(false, 0)

        main_box = Gtk::VBox.new(false, 10)
        button_box = Gtk::HBox.new(false, 10)

        config_title_label = Gtk::Label.new
        config_title_label.set_markup("<b>" + _("Import your photos and movies to this computer") + "</b>")
        main_box.pack_start(config_title_label, false, true, 0)

        from_box = Gtk::HBox.new(false, 10)
        from_label = Gtk::Label.new(_("Import from"))
        from_entry = Gtk::Entry.new
        from_entry.width_chars = 20
        from_entry.signal_connect("changed") { |w| @src = w.text }
        from_entry.text = @src
        from_box.pack_start(from_label, false, false, 0)
        from_box.pack_start(from_entry, false, false, 0)
        main_box.pack_start(from_box, false, true, 0)

        to_box = Gtk::HBox.new(false, 10)
        to_label = Gtk::Label.new(_("Import into"))
        to_entry = Gtk::Entry.new
        to_entry.width_chars = 20
        to_entry.signal_connect("changed") { |w| @dstdir = w.text }
        to_entry.text = @dstdir
        to_box.pack_start(to_label, false, false, 0)
        to_box.pack_start(to_entry, false, false, 0)
        main_box.pack_start(to_box, false, true, 0)

        user_textentry_box = Gtk::HBox.new(false, 10)
        user_textentry_label = Gtk::Label.new(_("Photographer Name (append to filename)"))
        user_textentry = Gtk::Entry.new
        user_textentry.width_chars = 20
        user_textentry.signal_connect("changed") { |w| @opt.photographer = w.text }
        user_textentry.text = @opt.photographer
        user_textentry_box.pack_start(user_textentry_label, false, false, 0)
        user_textentry_box.pack_start(user_textentry, false, false, 0)
        main_box.pack_start(user_textentry_box, false, true, 0)

        datedir_checkbox = Gtk::CheckButton.new(_("Import under the date name (YYYY-MM-DD) directory"))
        datedir_checkbox.active = true if ( @opt.datedir )
        datedir_checkbox.signal_connect("toggled") { |w| @opt.datedir = w.active? }
        main_box.pack_start(datedir_checkbox, false, true, 0)

        move_checkbox = Gtk::CheckButton.new(_("Move files instead of copy"))
        move_checkbox.active = true if ( @opt.move )
        move_checkbox.signal_connect("toggled") { |w| @opt.move = w.active? }
        main_box.pack_start(move_checkbox, false, true, 0)

        movie_checkbox = Gtk::CheckButton.new(_("Import movies at the same time"))
        movie_checkbox.active = true if ( @opt.with_movie )
        movie_checkbox.signal_connect("toggled") { |w| @opt.with_movie = w.active? }
        main_box.pack_start(movie_checkbox, false, true, 0)

        rename_checkbox = Gtk::CheckButton.new(_("Do not rename files"))
        rename_checkbox.active = true if ( @opt.without_rename )
        rename_checkbox.signal_connect("toggled") { |w| @opt.without_rename = w.active? }
        main_box.pack_start(rename_checkbox, false, true, 0)
 
        verbose_checkbox = Gtk::CheckButton.new(_("Show _verbose log"))
        verbose_checkbox.active = true if ( @opt.verbose )
        verbose_checkbox.signal_connect("toggled") { |w| @opt.verbose = w.active? }
        button_box.pack_start(verbose_checkbox, false, true, 0)

        no_act_checkbox = Gtk::CheckButton.new(_("Trial run with _no changes made"))
        no_act_checkbox.active = true if ( @opt.no_act )
        no_act_checkbox.signal_connect("toggled") { |w| @opt.no_act = w.active? }
        button_box.pack_start(no_act_checkbox, false, true, 0)

        @button_exec = Gtk::Button.new(_("Execute"))
        @button_exec.signal_connect( "clicked" ) { |w| execute(w) }
        button_box.pack_end(@button_exec, false, true, 0)

        main_box.pack_end(button_box, false, true, 0)

        # show status bar
        @status_bar = Gtk::Statusbar.new
        @status_bar_context_id = @status_bar.get_context_id("main")

        # show log box
        log_box = Gtk::ScrolledWindow.new(hadjustment = nil, vadjustment = nil)
        log_box.set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_ALWAYS)
        @log_text = Gtk::TextView.new
        @log_text.editable = false
        log_box.add(@log_text)
        class << @log_text
          def puts(str)
            self.buffer.insert(self.buffer.end_iter, str + "\n")
          end
        end

        main_box_h.pack_start(main_box, true, true, 15)

        window.add(whole_box)
        whole_box.pack_start(main_box_h, false, true, 15)
        whole_box.pack_start(log_box, true, true, 0)
        whole_box.pack_end(@status_bar, false, true, 0)

        return window
      end
    end
  end
end

def main
  opt = RbPhoto::Import::Options.new
  if ( opt.no_gui || ARGV.size >= 3 )
    RbPhoto::Import::Cui.new(opt)
  else
    RbPhoto::Import::Gui.new(opt)
  end
end

main if ( __FILE__ == $0 )

# vim: set ts=2 sw=2 expandtab:
